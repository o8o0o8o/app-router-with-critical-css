import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { join } from "path";
import fs from "fs";
import { headers } from "next/headers";

const inter = Inter({ subsets: ["latin"] });

function getCSSPaths(page: string | null) {
  switch (true) {
    case page && page.startsWith("/dynamic"):
      return [
        join("/_next", "static", "css", "dynamic.css"),
        join("/_next", "static", "css", "globals.css"),
      ];
    case page === "/":
      return [join("/_next", "static", "css", "globals.css")];
    default:
      return [join("/_next", "static", "css", "globals.css")];
  }
}

function getCriticalCSS(page: string | null) {
  if (!page) {
    return false;
  }

  const withoutQuery = page.split("?")[0];

  try {
    return (
      <style
        dangerouslySetInnerHTML={{
          __html: fs.readFileSync(
            join(process.cwd(), "critters", withoutQuery, "styles.css"),
            "utf-8"
          ),
        }}
      />
    );
  } catch (error) {}

  return false;
}

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const headersList = headers();
  const pathName = headersList.get("x-pathname");
  const criticalCSS = getCriticalCSS(pathName);
  const isCriticalCSSMode = process.env.CRITTERS_RUNTIME && criticalCSS;

  return (
    <html lang="en">
      <head>
        {isCriticalCSSMode
          ? criticalCSS
          : getCSSPaths(pathName).map((link) => (
              <link key={link} rel="stylesheet" href={link} />
            ))}
      </head>

      <body className={inter.className}>
        {children}
        {isCriticalCSSMode &&
          getCSSPaths(pathName).map((link) => (
            <link key={link} rel="stylesheet" href={link} />
          ))}
      </body>
    </html>
  );
}
